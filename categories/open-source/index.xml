<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Open Source on Homesteading</title>
    <link>http://ebsen.me/categories/open-source/</link>
    <description>Recent content in Open Source on Homesteading</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Mar 2016 10:58:51 -0600</lastBuildDate>
    <atom:link href="http://ebsen.me/categories/open-source/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dice</title>
      <link>http://ebsen.me/project/dice/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:51 -0600</pubDate>
      
      <guid>http://ebsen.me/project/dice/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This project is deprecated in favor of &lt;a href=&#34;http://ebsen.me/project/ranger&#34;&gt;Ranger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Fourth of July the family and I visited my parents. There, my mom keeps this huge Disney-themed book of board games. the games all use a digital built-in display instead of dice.  Only one problem: the batteries were dead and we couldn&amp;rsquo;t find any dice in the house.&lt;/p&gt;

&lt;p&gt;I improvised by writing a very simple node script that returned a random number from one to six. Easy enough. Each played &amp;ldquo;rolled the dice&amp;rdquo; by tapping the Up key to bring up the previous command (this ad hoc dice script, in this case) and hit return to get a new number back. It worked for our game that afternoon (crisis averted!) but I can&amp;rsquo;t say the kids enjoyed it much.&lt;/p&gt;

&lt;p&gt;So, to simplify things for the next time this happens, I wrapped that little script in a web page. Now, instead of fiddling with an arcane command prompt to &amp;ldquo;roll&amp;rdquo; a digital die, you just click a button.&lt;/p&gt;

&lt;p&gt;Upon seeing the project, a friend (who may or may not play a little D&amp;amp;D) called me out for only supporting six-sided die. So I added a Settings pane to allow you to configure the number of imaginary sides on your imaginary die.&lt;/p&gt;

&lt;p&gt;(In case you&amp;rsquo;re wondering, the singular of &amp;ldquo;dice&amp;rdquo; is &amp;ldquo;die.&amp;rdquo; I kept saying &amp;ldquo;dice&amp;rdquo; and my wife kept ruthlessly correcting my improper conjugation.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Time</title>
      <link>http://ebsen.me/project/gametime/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:34 -0600</pubDate>
      
      <guid>http://ebsen.me/project/gametime/</guid>
      <description>&lt;p&gt;I wanted a super-simple way to keep score at our son&amp;rsquo;s soccer games. The app has two buttons, one for each score. Tap to add a point. Refresh the page to reset both scores to zero.&lt;/p&gt;

&lt;p&gt;To make the buttons easier to tap, I placed them especially large and near the bottom of the screen. To eliminate the tap delay on mobile browsers, I added &lt;a href=&#34;http://ftlabs.github.io/fastclick/&#34;&gt;FastClick&lt;/a&gt;. I also disabled page zooming and the bouncy-scroll thing that Safari does at the bottom of the page. In most cases, these UI features serve a purpose. In this case, they introduce complexity and make those two big obvious buttons just a &lt;em&gt;little&lt;/em&gt; harder to hit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ranger</title>
      <link>http://ebsen.me/project/ranger/</link>
      <pubDate>Sat, 12 Mar 2016 10:57:17 -0600</pubDate>
      
      <guid>http://ebsen.me/project/ranger/</guid>
      <description>&lt;p&gt;Some time after building &lt;a href=&#34;http://ebsen.me/project/dice&#34;&gt;Dice&lt;/a&gt;, my wife asked if I could modify it to allow a wider range of possible numbers. So I forked Dice to create Ranger.&lt;/p&gt;

&lt;p&gt;Ranger started just to help her play Bingo with the kids but I hope to get back around it it and rebuild it with &lt;a href=&#34;http://elm-lang.org&#34;&gt;Elm&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rock Paper Scissors</title>
      <link>http://ebsen.me/project/rock-paper-scissors/</link>
      <pubDate>Sat, 12 Mar 2016 10:54:52 -0600</pubDate>
      
      <guid>http://ebsen.me/project/rock-paper-scissors/</guid>
      <description>&lt;p&gt;Rock, Paper, Scissors is a game many of us learn as children. I thought I could use it to learn more about event handlers and logic in the browser.&lt;/p&gt;

&lt;p&gt;The app waits for you to choose between rock, paper, or scissors. Once you do, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;&gt;an event fires&lt;/a&gt;. That event keeps a note of what you selected, gets the computer to pick, and notifies you whether you won or lost. The event only starts the game and updates the screen with the result. It doesn&amp;rsquo;t know anything about the game itself. For that, we look to the model.&lt;/p&gt;

&lt;p&gt;The model contains the all logic for the game. It knows that scissors beats paper, paper beats rock, and so forth. It knows what you selected (because the event shared that information) and it knows how to tell the computer to select either rock, paper, or scissors at random. It then compares those two selections, decides the winner, and gives that information back to the event.&lt;/p&gt;

&lt;p&gt;The event updates the page to tell you whether you won, lost, or tied, and goes back to waiting for another selection.&lt;/p&gt;

&lt;p&gt;It turns out, programming even very simple logic like &amp;ldquo;rock beats scissors, scissors beats paper, etc&amp;rdquo; can be done in all sorts of ways. I chose to keep the user interface and the game&amp;rsquo;s logic very separate because I know and like the &lt;a href=&#34;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model-View-Controller&lt;/a&gt; pattern used in &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html&#34;&gt;iOS programming&lt;/a&gt; and web frameworks like &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Songbook</title>
      <link>http://ebsen.me/project/songbook/</link>
      <pubDate>Tue, 05 Jan 2016 21:13:37 -0600</pubDate>
      
      <guid>http://ebsen.me/project/songbook/</guid>
      <description>&lt;p&gt;This project went through a lot of iterations before I finished. It turns out that HTML doesn&amp;rsquo;t really offer any kind semantic markup or even a microformat for song lyrics. This led me to experiment.&lt;/p&gt;

&lt;p&gt;I knew I didn&amp;rsquo;t want to manually update the HTML on every song every time I changed my mind. So I treated the lyrics themselves as data instead of markup. Then, I scripted the output I wanted with &lt;a href=&#34;http://jade-lang.com&#34;&gt;Jade&lt;/a&gt; and fed it the song data.&lt;/p&gt;

&lt;p&gt;Now, I could now change the markup &lt;em&gt;in a single place&lt;/em&gt; and all the songs would update. That&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;the DRY principle&lt;/a&gt; at work.&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;re curious, I ended up using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&#34;&gt;unordered lists&lt;/a&gt; for each line of the chorus and verses.)&lt;/p&gt;

&lt;p&gt;As a result, this project includes &lt;a href=&#34;https://gist.github.com/ebsen/926a58fb21d5f7f3a20a&#34;&gt;the greatest, most beautiful piece of template code I&amp;rsquo;ve ever written&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>