<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Static on Homesteading</title>
    <link>ebsen.me/categories/static/</link>
    <description>Recent content in Static on Homesteading</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Mar 2016 10:58:51 -0600</lastBuildDate>
    <atom:link href="ebsen.me/categories/static/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dice</title>
      <link>/ebsen.me/project/dice/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:51 -0600</pubDate>
      
      <guid>/ebsen.me/project/dice/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This project is deprecated in favor of &lt;a href=&#34;ebsen.me/project/ranger&#34;&gt;Ranger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Fourth of July the family and I visited my parents. There, my mom keeps this huge Disney-themed book of board games. the games all use a digital built-in display instead of dice.  Only one problem: the batteries were dead and we couldn&amp;rsquo;t find any dice in the house.&lt;/p&gt;

&lt;p&gt;I improvised by writing a very simple node script that returned a random number from one to six. Easy enough. Each played &amp;ldquo;rolled the dice&amp;rdquo; by tapping the Up key to bring up the previous command (this ad hoc dice script, in this case) and hit return to get a new number back. It worked for our game that afternoon (crisis averted!) but I can&amp;rsquo;t say the kids enjoyed it much.&lt;/p&gt;

&lt;p&gt;So, to simplify things for the next time this happens, I wrapped that little script in a web page. Now, instead of fiddling with an arcane command prompt to &amp;ldquo;roll&amp;rdquo; a digital die, you just click a button.&lt;/p&gt;

&lt;p&gt;Upon seeing the project, a friend (who may or may not play a little D&amp;amp;D) called me out for only supporting six-sided die. So I added a Settings pane to allow you to configure the number of imaginary sides on your imaginary die.&lt;/p&gt;

&lt;p&gt;(In case you&amp;rsquo;re wondering, the singular of &amp;ldquo;dice&amp;rdquo; is &amp;ldquo;die.&amp;rdquo; I kept saying &amp;ldquo;dice&amp;rdquo; and my wife kept ruthlessly correcting my improper conjugation.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Time</title>
      <link>/ebsen.me/project/gametime/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:34 -0600</pubDate>
      
      <guid>/ebsen.me/project/gametime/</guid>
      <description>&lt;p&gt;I wanted a super-simple way to keep score at our son&amp;rsquo;s soccer games. The app has two buttons, one for each score. Tap to add a point. Refresh the page to reset both scores to zero.&lt;/p&gt;

&lt;p&gt;To make the buttons easier to tap, I placed them especially large and near the bottom of the screen. To eliminate the tap delay on mobile browsers, I added &lt;a href=&#34;http://ftlabs.github.io/fastclick/&#34;&gt;FastClick&lt;/a&gt;. I also disabled page zooming and the bouncy-scroll thing that Safari does at the bottom of the page. In most cases, these UI features serve a purpose. In this case, they introduce complexity and make those two big obvious buttons just a &lt;em&gt;little&lt;/em&gt; harder to hit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graduation 2015</title>
      <link>/ebsen.me/project/graduation-2015/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:25 -0600</pubDate>
      
      <guid>/ebsen.me/project/graduation-2015/</guid>
      <description>&lt;p&gt;An official university landing page to highlight the accomplishments of our graduating bachelors, masters, and Ph.D. students, including live streams of the commencement ceremonies over YouTube, &lt;a href=&#34;https://youtu.be/VTRt64lE3uQ&#34;&gt;our own original recap video&lt;/a&gt;, and curated Instagram and Twitter posts.&lt;/p&gt;

&lt;p&gt;As our first experience at streaming live video, we needed a lean website that would perform really well. So we opted to go without a database and we optimized common performance bottlenecks to reduce the size of the page.&lt;/p&gt;

&lt;p&gt;I also worked with IT to put together a new way for us to publish the website. This also allows us to much more easily track changes in the code and revert them when bugs are discovered.&lt;/p&gt;

&lt;p&gt;The live stream was a huge success for us, reaching hundreds of people across 26 states and 11 countries and reaching the highest number of mobile viewers (32%) of any university website to date. In the time since, the recap video has reached thousands of viewers.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;//graduation.sdstate.edu&#34;&gt;current iteration of the graduation website&lt;/a&gt; adds &lt;a href=&#34;https://storify.com/SDState/sdstate15&#34;&gt;social media integration through Storify&lt;/a&gt;, &lt;a href=&#34;https://open.spotify.com/user/sdstate/playlist/2xNGtjV0ghaypMHwCmBwfv&#34;&gt;a music playlist from Spotify&lt;/a&gt;, and &lt;a href=&#34;https://www.facebook.com/media/set/?set=a.10152904174661647.1073741842.88914146646&amp;amp;type=1&#34;&gt;a Facebook photo album&lt;/a&gt;. I also scripted our Git deployment process to make publishing and updating the site much simpler.&lt;/p&gt;

&lt;p&gt;Building on success in our 2014, the website reached people in 43 states and 32 countries on commencement day. A strong majority of those visitors (57%) came from mobile, breaking our previous record. The Facebook photo album on the site reached over 100,000 people.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hobo Day Parade</title>
      <link>/ebsen.me/project/hobo-day-parade/</link>
      <pubDate>Sat, 12 Mar 2016 10:58:12 -0600</pubDate>
      
      <guid>/ebsen.me/project/hobo-day-parade/</guid>
      <description>&lt;p&gt;The website for our first-ever live stream of the annual Hobo Day parade.&lt;/p&gt;

&lt;p&gt;Built in just a few days, I used a number of new &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; tools. &lt;a href=&#34;http://harpjs.com/&#34;&gt;Harp&lt;/a&gt; produced a local copy of the website (written in two new languages, &lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt;, and &lt;a href=&#34;http://lesscss.org/&#34;&gt;Less&lt;/a&gt;) while &lt;a href=&#34;http://www.browsersync.io/&#34;&gt;BrowserSync&lt;/a&gt; let me share that website live to the rest of the team while I worked. This project became the template we use to build the majority of static websites today.&lt;/p&gt;

&lt;p&gt;Posts to social media in the weeks leading up to Hobo Day help to build a crescendo around the event and the website, leading to more people (62%) watching the parade&amp;rsquo;s live stream from the website than from YouTube itself. Nearly half of viewers (45%) did so from a mobile device, another record at the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Holiday Video 2014</title>
      <link>/ebsen.me/project/holiday-2014/</link>
      <pubDate>Sat, 12 Mar 2016 10:57:38 -0600</pubDate>
      
      <guid>/ebsen.me/project/holiday-2014/</guid>
      <description>&lt;p&gt;At the end of each year, the university publishes a video to highlight the accomplishments made by its faculty and staff. This year, that email campaign also kicked off #WeAreSDState, a campaign to promote the university&amp;rsquo;s value around the region.&lt;/p&gt;

&lt;p&gt;We wanted the website hosting the video to match the email used to distribute it. This led me to experiment with animating backgrounds and cross-fading images in the browser. While the final product didn&amp;rsquo;t ship with these features, they served as excellent reminders that &amp;ldquo;the web&amp;rdquo; isn&amp;rsquo;t the same across screens and devices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ranger</title>
      <link>/ebsen.me/project/ranger/</link>
      <pubDate>Sat, 12 Mar 2016 10:57:17 -0600</pubDate>
      
      <guid>/ebsen.me/project/ranger/</guid>
      <description>&lt;p&gt;Some time after building &lt;a href=&#34;ebsen.me/project/dice&#34;&gt;Dice&lt;/a&gt;, my wife asked if I could modify it to allow a wider range of possible numbers. So I forked Dice to create Ranger.&lt;/p&gt;

&lt;p&gt;Ranger started just to help her play Bingo with the kids but I hope to get back around it it and rebuild it with &lt;a href=&#34;http://elm-lang.org&#34;&gt;Elm&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rock Paper Scissors</title>
      <link>/ebsen.me/project/rock-paper-scissors/</link>
      <pubDate>Sat, 12 Mar 2016 10:54:52 -0600</pubDate>
      
      <guid>/ebsen.me/project/rock-paper-scissors/</guid>
      <description>&lt;p&gt;Rock, Paper, Scissors is a game many of us learn as children. I thought I could use it to learn more about event handlers and logic in the browser.&lt;/p&gt;

&lt;p&gt;The app waits for you to choose between rock, paper, or scissors. Once you do, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;&gt;an event fires&lt;/a&gt;. That event keeps a note of what you selected, gets the computer to pick, and notifies you whether you won or lost. The event only starts the game and updates the screen with the result. It doesn&amp;rsquo;t know anything about the game itself. For that, we look to the model.&lt;/p&gt;

&lt;p&gt;The model contains the all logic for the game. It knows that scissors beats paper, paper beats rock, and so forth. It knows what you selected (because the event shared that information) and it knows how to tell the computer to select either rock, paper, or scissors at random. It then compares those two selections, decides the winner, and gives that information back to the event.&lt;/p&gt;

&lt;p&gt;The event updates the page to tell you whether you won, lost, or tied, and goes back to waiting for another selection.&lt;/p&gt;

&lt;p&gt;It turns out, programming even very simple logic like &amp;ldquo;rock beats scissors, scissors beats paper, etc&amp;rdquo; can be done in all sorts of ways. I chose to keep the user interface and the game&amp;rsquo;s logic very separate because I know and like the &lt;a href=&#34;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;Model-View-Controller&lt;/a&gt; pattern used in &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html&#34;&gt;iOS programming&lt;/a&gt; and web frameworks like &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Songbook</title>
      <link>/ebsen.me/project/songbook/</link>
      <pubDate>Tue, 05 Jan 2016 21:13:37 -0600</pubDate>
      
      <guid>/ebsen.me/project/songbook/</guid>
      <description>&lt;p&gt;This project went through a lot of iterations before I finished. It turns out that HTML doesn&amp;rsquo;t really offer any kind semantic markup or even a microformat for song lyrics. This led me to experiment.&lt;/p&gt;

&lt;p&gt;I knew I didn&amp;rsquo;t want to manually update the HTML on every song every time I changed my mind. So I treated the lyrics themselves as data instead of markup. Then, I scripted the output I wanted with &lt;a href=&#34;http://jade-lang.com&#34;&gt;Jade&lt;/a&gt; and fed it the song data.&lt;/p&gt;

&lt;p&gt;Now, I could now change the markup &lt;em&gt;in a single place&lt;/em&gt; and all the songs would update. That&amp;rsquo;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;the DRY principle&lt;/a&gt; at work.&lt;/p&gt;

&lt;p&gt;(If you&amp;rsquo;re curious, I ended up using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&#34;&gt;unordered lists&lt;/a&gt; for each line of the chorus and verses.)&lt;/p&gt;

&lt;p&gt;As a result, this project includes &lt;a href=&#34;https://gist.github.com/ebsen/926a58fb21d5f7f3a20a&#34;&gt;the greatest, most beautiful piece of template code I&amp;rsquo;ve ever written&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>